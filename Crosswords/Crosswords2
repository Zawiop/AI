import sys; args = sys.argv[1:]
import re, random
dic = open(args[0])

args = [x.lower() for x in args]

args = args[1:]
# length : ((index, char) : {words})
lengthToWord = {}
neededREGEXtoCandidates = {}
for word in dic:
    lengthToWord.setdefault(len(word.strip()), []).append(word.strip().lower())
print('gzip' in lengthToWord[4])
temp = args[0].split("x")
H = int(temp[0])
W = int(temp[1])

LENGTH = H * W
BLOCKS = int(args[1])

wordUnparsed = args[2:]

class Slots:
    length = 0
    word = {}
    startIndex = 0
    VOH = ''
    filled = False
    wordStr = ''
    def __init__(self, length, word, startIndex, VOH, filled =  False):
        self.length = length
        self.word = word
        self.startIndex = startIndex
        self.VOH = VOH
        self.filled = filled
    def __str__(self):
        print (f'Len: {self.length}, Word: {self.word}, Index: {self.startIndex}, VOH: {self.VOH}, Filled: {self.filled}, WordStr: {self.wordStr}')
        return ''
    

def rotate180(brd, W):
    return brd[::-1]

def rotate90(brd, W):
    
    rows = [brd[i:i+W] for i in range(0, len(brd), W)]
    return "".join([row[j] for j in range(len(rows[0])) for row in rows])

def in_bounds(idx, delta, crossword):
    new_idx = idx + delta
    if new_idx < 0 or new_idx >= len(crossword):
        return False
    # For horizontal moves, ensure we remain on the same row
    if abs(delta) == 1:
        if (idx // W) != (new_idx // W):
            return False
    return True

def checkUnderScoreThrees(crossword, return_info=False):
    # Define axes using the positive deltas: horizontal (1) and vertical (W)
    axes = {'H': 1, 'V': W}
    axis = None
    for idx, cell in enumerate(crossword):
        if cell == '#':
            continue  # Skip blocked cells
        for axis, d in axes.items():
            valid = False
            neg_d = -d
            
            # Pattern 1: two steps in the positive direction
            if in_bounds(idx, d, crossword) and in_bounds(idx, 2 * d, crossword):
                if crossword[idx + d] != '#' and crossword[idx + 2 * d] != '#':
                    valid = True
            
            # Pattern 2: one step in each direction (one positive, one negative)
            if in_bounds(idx, d, crossword) and in_bounds(idx, neg_d, crossword):
                if crossword[idx + d] != '#' and crossword[idx + neg_d] != '#':
                    valid = True
            
            # Pattern 3: two steps in the negative direction
            if in_bounds(idx, neg_d, crossword) and in_bounds(idx, 2 * neg_d, crossword):
                if crossword[idx + neg_d] != '#' and crossword[idx + 2 * neg_d] != '#':
                    valid = True
            
            # If none of the patterns work for this axis, return violation info
            if not valid:
                return (False, axis, idx) if return_info else False
    return  (True, axis, idx) if return_info else True

def checkIsolated(crossword, fill_isolated=False):
   
    n = len(crossword)
    
    non_block = [i for i, ch in enumerate(crossword) if ch != '#']
    if not non_block:
        return True
    parent = list(range(n))
    rank = [0] * n
    
    def find(x):
        while parent[x] != x:
            parent[x] = parent[parent[x]]
            x = parent[x]
        return x
    
    def union(x, y):
        rx = find(x)
        ry = find(y)
        if rx == ry:
            return
        if rank[rx] < rank[ry]:
            parent[rx] = ry
        elif rank[rx] > rank[ry]:
            parent[ry] = rx
        else:
            parent[ry] = rx
            rank[rx] += 1
    
    
    for i in non_block:
        r = i // W
        c = i % W
        
        if c > 0 and crossword[i - 1] != '#':
            union(i, i - 1)
        
        if c < W - 1 and crossword[i + 1] != '#':
            union(i, i + 1)
        
        if r > 0 and crossword[i - W] != '#':
            union(i, i - W)
        
        if r < H - 1 and crossword[i + W] != '#':
            union(i, i + W)
    
    
    components = {}
    for i in non_block:
        root = find(i)
        components.setdefault(root, []).append(i)
    
    
    if len(components) == 1:
        return crossword if fill_isolated else True
    
    
    if not fill_isolated:
        return False
    
    
    largest_root = max(components.keys(), key=lambda r: len(components[r]))
    main_component = set(components[largest_root])
    board_list = list(crossword)
    for i in non_block:
        if i not in main_component:
            board_list[i] = '#'
            
    return "".join(board_list)

def flipAndConvert(crossword):
    rotated = crossword[::-1]
    board_list = list(crossword)
    for i, ch in enumerate(rotated):
        # Only set to '#' if the current cell is empty
        if ch == '#' and board_list[i] == '-':

            board_list[i] = '#'
    return "".join(board_list)


def flipHorizontally(crossword):
    board_list = list(crossword)
    for i, ch in enumerate(crossword[::-1]):
        board_list[i] = ch
    return "".join(board_list)  

def augmentBoard(crossword):
    new_board = '?' * (W + 2)
    for i in range(H):
        new_board += '?' + crossword[i * W:(i + 1) * W] + '?'
    return new_board + '?' * (W + 2)

def deaugment(augmented_board):
    tempW = W + 2
    rows = [augmented_board[i * tempW:(i + 1) * tempW] for i in range(H + 2)]
    inner_rows = [row[1:-1] for row in rows[1:-1]]
    return ''.join(inner_rows)

def rowsToCols(crossword, width, height):
    rows = [crossword[i * width:(i + 1) * width] for i in range(height)]
    cols = ["".join(col) for col in zip(*rows)]
    return ''.join(cols)

def replaceToFix(crossword):
    new_board = crossword
    new_board = new_board.replace('#-#', '###')
    new_board = new_board.replace('#-?', '##?')
    new_board = new_board.replace('#--?', '###?')
    new_board = new_board.replace('#--#', '####')
    
    new_board = new_board.replace('?-#', '?##')
    new_board = new_board.replace('?--#', '?###')
    
    new_board = new_board = rowsToCols(new_board, W+ 2, H + 2)
    
    new_board = new_board.replace('#-#', '###')
    new_board = new_board.replace('#-?', '##?')
    new_board = new_board.replace('#--?', '###?')
    new_board = new_board.replace('#--#', '####')
    
    new_board = new_board.replace('?-#', '?##')
    new_board = new_board.replace('?--#', '?###')
    
    
    return rowsToCols(new_board, H + 2, W + 2)

def fixBoard2(crossword):
    new_board = crossword    
    new_board = checkIsolated(new_board, fill_isolated=True)
    
    old = augmentBoard(new_board)
    new = replaceToFix(augmentBoard(new_board))
    while old != new:
        old = new
        new = replaceToFix(new)
    return deaugment(new)

def fixBoard(crossword):
    new_board = crossword
    
    new_board = checkIsolated(new_board, fill_isolated=True)
    #if new_board == True or new_board == False: return ''
    valid, direction, pos = checkUnderScoreThrees(new_board, return_info=True)
    while not valid:
        #print2D(new_board)
        #print()
        if direction == 'H':
            row_start = pos - (pos % W)
            row_end = row_start + W - 1
            
            left = pos
            while left > row_start and new_board[left - 1] != '#':
                left -= 1
            
            right = pos
            while right < row_end and new_board[right + 1] != '#':
                right += 1
            for i in range(left, right + 1):
                if new_board[i] == '-':
                    new_board = new_board[:i] + '#' + new_board[i+1:]
                else: return ''
            #new_board = new_board[:left] + '#' * (right - left + 1) + new_board[right+1:]
            new_board = flipAndConvert(new_board)
        else:
            
            col = pos % W
            
            top = pos
            while top >= W and new_board[top - W] != '#':
                top -= W
            
            bottom = pos
            while bottom < (H - 1) * W and new_board[bottom + W] != '#':
                bottom += W
            
            board_list = list(new_board)
            for i in range(top, bottom + 1, W):
                if new_board[i] == '-':
                    board_list[i] = '#'
                else: return ''
            new_board = ''.join(board_list)
            new_board = flipAndConvert(new_board)
        
        
        valid, direction, pos = checkUnderScoreThrees(new_board, return_info=True)
    
    return new_board



def isValid(crossword):
    return checkUnderScoreThrees(crossword) and checkIsolated(crossword)

def getPossible(crossword, W):
    poss = []
    for index, char in enumerate(crossword):
        if char == '-' and (crossword[LENGTH - index - 1] == '-' or crossword[LENGTH - index - 1] == '#'):
            poss.append((sortingNum2(crossword, index, W) + sortingNum(crossword, index, W), index))
    sorted(poss)
    dic = {}
    for key, value in poss:
        dic.setdefault(key, []).append(value)
    return dic

def sortingNum(crossword, index, W):
    row_start = (index // W) * W  # Get the start of the row
    col_start = index % W         # Get the start of the column
    row_blocks = sum(1 for c in range(row_start, row_start + W) if crossword[c] == '#')

    col_blocks = sum(1 for r in range(col_start, len(crossword), W) if crossword[r] == '#')

    return row_blocks + col_blocks 

def sortingNum2(crossword, index, W, digagonals = True):
    count = 0
    total = len(crossword)
    H = total // W  
    r = index // W
    c = index % W

    # Cardinal directions:
    # Left
    if c > 0 and crossword[index - 1] == '#':
        count += 1
    # Right
    if c < W - 1 and crossword[index + 1] == '#':
        count += 1
    # Up
    if r > 0 and crossword[index - W] == '#':
        count += 1
    # Down
    if r < H - 1 and crossword[index + W] == '#':
        count += 1
        
    if digagonals:
        # Diagonals:
        # Top-left
        if r > 0 and c > 0 and crossword[index - W - 1] == '#':
            count += 1
        # Top-right
        if r > 0 and c < W - 1 and crossword[index - W + 1] == '#':
            count += 1
        # Bottom-left
        if r < H - 1 and c > 0 and crossword[index + W - 1] == '#':
            count += 1
        # Bottom-right
        if r < H - 1 and c < W - 1 and crossword[index + W + 1] == '#':
            count += 1

    return count

def checkPossibiles(crossword, W, target):
    possible = getPossible(crossword, W)
    for key in possible:
        positions = possible[key]
        random.shuffle(positions)  # shuffle in place
        for pos in positions:
            new_board = crossword[:pos] + '#' + crossword[pos+1:]
            if crossword[(H*W - 1) - pos] != '-':
                continue
            new_board = new_board[:(H*W - 1) - pos] + '#' + new_board[(H*W - 1) - pos+1:]
            ret = placeBlocks(new_board, target)
            if ret:
                return ret
    return None

        
def placeBlocks(raw_board, target):
    #print(raw_board)
    crossword = raw_board
    if not isValid(crossword):
        #if target - crossword.count('#') < 25:
        #    return None
        crossword = fixBoard2(crossword)
    if crossword.count('#') == target:
        return crossword
    if crossword.count('#') > target:
        return None
    
    if (w:=checkPossibiles(crossword, W, target)): return w
    return None

def placeWord(crossword, VOH, x, y, word, index = None):
    if index == None:
        index = x * W + y
    BLOCKS = 0
    lst = [*crossword]
    end = index + len(word)
    step = 1
    if VOH == 'v': 
        step = W
        end = index + (len(word)*W)
    counter = 0
    for c in range(index, end, step):
        lst[c] = word[counter]
        #print(len(crossword) - c -1)
        
        if word[counter] == '#': 
            lst[len(crossword) - c - 1] = '#'
            BLOCKS += 2
            
        #elif lst[len(crossword) - c - 1] == '-': 
         #   lst[len(crossword) - c - 1] = '/'
            
        counter += 1
    return ''.join(lst)

def parsewordUnparsed(wordUnparsedList, brd):
    for item in wordUnparsedList:
        VOH = item[0]
        x, part = item[1:].split('x',1)
        try:
            y = int(part[:2])
            word = part[2:]
        except:
            y = int(part[0])    
            word = part[1:]
        x = int(x)
        if not word: word = '#'
    
        brd = placeWord(brd, VOH, x, y, word)
    return brd

def addWordsHorz(crossword):
    crossword = list(crossword)
    index = 0
    while index < len(crossword):
        if crossword[index] == '-':
            left = index
            right = index + 1
            while right < len(crossword) and crossword[right] != '#' and (right % W != 0):
                right += 1

            segment_length = right - left
            segment = ''.join(crossword[left:right])
            pattern = segment.replace('-', '.')
            word = None
            
            for test in lengthToWord.get(segment_length, []):
                if re.fullmatch(pattern, test, re.IGNORECASE):
                    word = test
                    lengthToWord[segment_length].remove(test)
                    break
            if word is None:
                index = right
                continue
            
            crossword[left:right] = list(word)
            index = right
        else:
            index += 1
    return ''.join(crossword)


def print2D(crossword):
    l = list(crossword)
    addin = 0
    if H * W != len(l):
        addin = 2
    for i in range(H +  addin):
        print("".join(l[i * (W+ addin) + j] for j in range(W + addin)))
    print()
        
def createSlots(crossword):
    slots = []
    i = 0
    seenV = set()
    seenH = set()
    while i < len(crossword):
        # Horizontal
        
        if crossword[i] != '#':
            if i not in seenH:
                indexes = [i]
                left = i
                right = i + 1
                seenH.add(i)
                while right < len(crossword) and crossword[right] != '#' and (right % W != 0):
                    seenH.add(right)
                    indexes.append(right)

                    right += 1
                slots.append(Slots(len(indexes),{i : crossword[i] for i in indexes} , left, 'h', False))

            
            if i not in seenV:
                indexesV = [i]
                top = i
                bottom = i + W
                seenV.add(i)
                while bottom < len(crossword) and crossword[bottom] != '#':
                    seenV.add(bottom)
                    indexesV.append(bottom)

                    bottom += W
                slots.append(Slots(len(indexesV),{i : crossword[i] for i in indexesV} , top, 'v', False))
        i +=1
    return sorted(slots, key = lambda x: len(x.word))

def addAWord(crossword, slots, word, index, VOH):
    multiplier = W if VOH == 'v' else 1
    for wordIndex, character in enumerate(word):
        for slot in slots:
            if (wordIndex * multiplier + index) in slot.word:
                slot.word[multiplier*wordIndex + index] = character
            if  not ('-' in slot.word.values()):
                slot.filled = True
            if index == slot.startIndex and VOH == slot.VOH:
                slot.VOH = VOH
                slot.wordStr = word
                    
    #for s in slots:
     #   print(s)
    crossword = placeWord(crossword, VOH, -1, -1, word, index)
    return crossword, slots

def copySlots(slots):
    new_slots = []
    for s in slots:
        new_s = Slots(s.length, s.word.copy(), s.startIndex, s.VOH, s.filled)
        new_s.wordStr = s.wordStr  
        new_slots.append(new_s)
    return new_slots
def mindots(regex):
    return regex.count('.')

def underneathREGEX(pattern):
    totest = []
    for regex in neededREGEXtoCandidates.keys():
        if re.fullmatch(pattern, regex, re.IGNORECASE):
            totest.append(regex)

    if totest == []:
        return False
    return sorted(totest, key = mindots)[0]

def addWordsBF(crossword, slots, used_words):
    if '-' not in crossword: print2D(crossword)
    complete = True
    for slot in slots:
        slot_str = ''.join(slot.word[i] for i in sorted(slot.word.keys()))
        if '-' in slot_str:
            complete = False
            break
        else:
            if slot.wordStr and slot_str != slot.wordStr:
                return None  
    if complete:
        return crossword  # All slots filled and valid; solution found

    
    candidate_slot = None
    candidate_list = None
    min_candidates = None

    for slot in slots:
        slot_str = ''.join(slot.word[i] for i in sorted(slot.word.keys()))
        if '-' in slot_str:
            pattern = ''.join(ch if ch != '-' else '.' for ch in slot_str)
            alt_regex = underneathREGEX(pattern)
            #if alt_regex:
            #    candidates = neededREGEXtoCandidates.get(alt_regex, [])
            #else:
            candidates = [w for w in lengthToWord.get(slot.length, []) if re.fullmatch(pattern, w, re.IGNORECASE)]
                #neededREGEXtoCandidates[pattern] = candidates
            # Filter out candidate words that have already been used.
            candidates = [w for w in candidates if w not in used_words]
            if not candidates:
                return None
            if candidate_slot is None or len(candidates) < min_candidates:
                candidate_slot = slot
                candidate_list = candidates
                min_candidates = len(candidates)

    if candidate_slot is None:
        return None
    candidate_list =random.shuffle(candidate_list)
    for word in candidate_list:
        new_crossword = crossword
        new_slots = copySlots(slots)
        target_slot = None
        for s in new_slots:
            if s.startIndex == candidate_slot.startIndex and s.VOH == candidate_slot.VOH:
                target_slot = s
                break
        if target_slot is None:
            continue

        updated_crossword, updated_slots = addAWord(new_crossword, new_slots, word, candidate_slot.startIndex, candidate_slot.VOH)
        new_used = used_words.copy()
        new_used.add(word)
        result = addWordsBF(updated_crossword, updated_slots, new_used)
        if result is not None:
            return result
    return None


   
    
    
def main():
    
    if BLOCKS == LENGTH:
        print2D("#" * LENGTH)
        return
    if LENGTH - BLOCKS < 9:
        print2D("#" * LENGTH)
        return
    crossword = '-' * LENGTH
    crossword = parsewordUnparsed(wordUnparsed, crossword)
    print2D(crossword)

    final_crossword = crossword
    final_crossword = flipAndConvert(final_crossword)
    if not isValid(final_crossword):
        final_crossword = fixBoard2(final_crossword)
    final_crossword = placeBlocks(final_crossword, BLOCKS)
    
    print2D(final_crossword)
    print2D(addWordsHorz(final_crossword))
          #print('Starting XWords2\n')     
    slots = createSlots(final_crossword)
    test = addWordsBF(final_crossword, slots, set())
    print2D(test)
    #final_crossword = addWordsHorz(final_crossword)

    

    
if __name__ == '__main__': main()
# Arrush Shah, p4, 2026
